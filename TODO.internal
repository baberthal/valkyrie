Pre-Release
-----------
- disable all buttons except memcheck
- disable all options pages except vg, vk, memcheck

- go over vk_config.cpp and see who exactly uses those vkobj type fns
  and see if we can do without them where poss.
- grep on FIXME, and fix
- grep on TODO, and do


configure:
----------
if --shared [CFG_SHARED=yes], make sure we can find the shared libs
(.a = static, .so = shared)
- add a --path-to-debugger=x
  then look for debugger(gdb) and set path in vk_include.h 
    so vkConfig can write it to [valgrind]db-command=gdb -nw %f %p
- add a --path-to-editor=x
  then look for editor (emacs) and set path in vk_include.h
    so vkConfig can write it to [valkyrie]src-editor=/usr/bin/emacs
- grep inside /coregrind/pub_core_options.h and get the value for
  #define VG_CLO_MAX_SFILES 10 and save to vk_include.h so the
  listbox widget knows the max. no. of suppression files allowed.
  Also, have to code for this in ValkyrieOptionsPage::getVgExec()
  so we know what the value is for a new valgrind version.
  Ask J if he could put a fn in wot I can query for this (easier 
  than doing all of the above.)



General:
--------
- make a src item paint its pixmap in the top-left corner
- fix suppressions stuff
- find the 'man standing' icon and use instead of the hand for 'stop'
- put some stuff in class option to say that certain option fields cannot 
  be empty if the option is a popt option.
- do not refuse to build if valgrind not found, but tell user the
  functionality will be severely restricted
- if valgrind not found, simply disable run button, 
  rather than not build at all.


main_window.cpp:
 - FIXME: this should use VkObject::ObjectId

options/vk_objects.cpp:
  TODO:  check Valgrind opts
  FIXME: this does not work with xml output
  FIXME: case SEL_SUPPS: is not done yet
  FIXME: when supp. files are specified on the cmd-line, any ...
  FIXME: case USR/DEF_SUPP_FILES: is not done yet

options/valkyrie_options_page.cpp:
  Currently, user cannot choose and set another path/to/valgrind;
  the code for this has been commented out pro tem as vkConfig reads the  
  /path/to/valgrind set in vk_include.h, which is auto-generated by
  configure.
  Decide whether we want to allow this functionality, and either 
  delete the commented-out code, or re-implement so it works.
  Problem: we would have to change vk_include.h "on the fly", and I'm
  not sure if I can get into self-modifying code at my time of life :)

options/*
   perhaps a startup check that no tool duplicates an option

vkObjects
 - ObjectId should be at most: VALKYRIE, VALGRIND, TOOL
   Then ToolObject could have ToolId: MEMCHECK, CACHEGRIND, MASSIF



Memcheck:
--------
 - stop()
   - move delay-time-before-killing to config
   - what to do if we can't stop sthng running?
   - implement stop for parse/merge log files
 - parseOutput(): 
   - proc->readLineXXX() doesn't respect client output formatting

XMLParser:
---------
 - client program output:
   - content has lost its spaces/formatting.


Known Bugs:
-----------
 - Start with --tool=cachegrind, change to memcheck, 'Run' => Parse err.





Links:
------
Drawing Graphs:
http://www.kde-apps.org/content/show.php?content=14826
http://www.kde-apps.org/content/show.php?content=9881
http://www.ics.com/qt
http://www.icewalkers.com/Linux/Software/519630/GraphPak-for-Qt.html


The Competition:
----------------
http://www.klocwork.com/products/

