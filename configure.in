# Process this file with autoconf to produce a configure script.

########################################################################
# ? AC_PREREQ(2.59)
AC_INIT(Valkyrie, 1.3.0.SVN, info@open-works.co.uk)
AC_CONFIG_SRCDIR([valkyrie/main.cpp])
AC_CONFIG_HEADER([config.h])
AC_CONFIG_MACRO_DIR(m4)
AM_INIT_AUTOMAKE

# ? AM_MAINTAINER_MODE

# ? AC_REVISION


########################################################################
# setup QT env - defined in m4/bnv_have_qt.m4
BNV_HAVE_QT

if test x$have_qt != xyes; then
   AC_MSG_ERROR([Cannot build without QT.])
fi


########################################################################
# Checks for options

# Find valgrind
AC_ARG_WITH([valgrind],
   [  --with-valgrind=PROGRAM   Valgrind executable ],
   [ # given
      # TODO: proper way of handling both --xyz=/path/to/foo, and --xyz=foo ?
      if test -x $withval; then
         AC_CHECK_FILE([$withval])  # ok if here: just print a message
         VALGRIND=$withval
      else
         AC_PATH_PROG([VALGRIND], [$withval])
      fi
      if test x"$VALGRIND" = x; then
         AC_MSG_ERROR([Valgrind executable '$withval' not found])
      fi
   ],
   [ # not given
      AC_PATH_PROG([VALGRIND], [valgrind])
   ])

if test x"$VALGRIND" = x ; then
   # Valgrind not found
   AC_MSG_WARN([Valgrind not found: may be configured at runtime.])
else
  # Valgrind found: check is ok
  AC_MSG_CHECKING([valgrind version (need >= 3.3.0)])
  VG_VERSION_MIN1=3
  VG_VERSION_MIN2=3
  VG_VERSION=`$VALGRIND --version | sed "s/^valgrind-//"`
  if test x"$VG_VERSION" = x; then
     # failed to start valgrind
     AC_MSG_WARN([Failed to start Valgrind. Please check your Valgrind installation. Valgrind path may be set at runtime.])
     VALGRIND=""
  else
     AC_MSG_RESULT([$VG_VERSION])
     VG_VERSION_1=`echo $VG_VERSION | sed "s/^\([[0-9]]\+\)\..*/\1/"`
     VG_VERSION_2=`echo $VG_VERSION | sed "s/^[[0-9]]\+\.\([[0-9]]\+\)\..*/\1/"`
     if { test $VG_VERSION_1 -lt $VG_VERSION_MIN1  || \
          test $VG_VERSION_2 -lt $VG_VERSION_MIN2; }; then
        VALGRIND=""
        AC_MSG_WARN([Not configuring for valgrind: need minimum version of 3.3.0.  Please configure with a more recent version of Valgrind (may be done at runtime).])
     fi
  fi
fi


# Check for source editor
AC_ARG_WITH([editor],
   [  --with-editor=PROGRAM   Source-code editor [[PROGRAM=$EDITOR|emacs|nedit|gvim|gview|kate]] ],
   [ # given
      # TODO: proper way of handling both --xyz=/path/to/foo, and --xyz=foo ?
      if test -x $withval; then
         AC_CHECK_FILE([$withval])  # ok if here: just print a message
         VK_EDITOR=$withval
      else
         AC_PATH_PROG([VK_EDITOR], [$withval])
      fi
      if test x"$VK_EDITOR" = x; then
         AC_MSG_ERROR([Editor '$withval' not found])
      fi

      # if unknown editor, give warning
      VK_ED_NAME=`echo $VK_EDITOR | sed "s/.*\///" | sed "s/-.*//"`
      if test "$VK_ED_NAME" != "emacs" && \
         test "$VK_ED_NAME" != "nedit" && \
         test "$VK_ED_NAME" != "gvim" && \
         test "$VK_ED_NAME" != "gview" && \
         test "$VK_ED_NAME" != "kate"; then
         AC_MSG_WARN([Unknown editor '$withval'.  If possible, set editor options in valkyrie to go to the target line-number, e.g. 'gvim +%n', where %n will be replaced with the line-number.])
      fi
   ],
   [ # not given
      # flag not given: try $EDITOR
      if test x"$EDITOR" != x ; then
         if test -x $EDITOR; then
	    # found absolute: just give msg
	    AC_CHECK_FILE([$EDITOR])
	    VK_EDITOR=$EDITOR
	 else
            # absolute not found: check $PATH
            AC_PATH_PROG([VK_EDITOR], [$EDITOR])
	 fi
      fi
      #if $EDITOR wasn't set, or failed check, try likely editors
      if test x"$VK_EDITOR" = x ; then
        AC_PATH_PROGS([VK_EDITOR], [emacs nedit gvim kate])
        if test x"$VK_EDITOR" = x ; then
           # Editor not found
           AC_MSG_WARN([No suitable editor found: may be configured at runtime.])
        fi
      fi
   ])

#Setup 'line' flag for known editors
VK_ED_NAME=`echo $VK_EDITOR | sed "s/.*\///" | sed "s/-.*//"`
if test "$VK_ED_NAME" == "emacs" || \
   test "$VK_ED_NAME" == "nedit" || \
   test "$VK_ED_NAME" == "gvim"  || \
   test "$VK_ED_NAME" == "gview"; then
   VK_EDITOR="$VK_EDITOR +%n"
else
   if test "$VK_ED_NAME" == "kate"; then
      VK_EDITOR="$VK_EDITOR --line %n"
   fi
fi



########################################################################
# Checks for programs.
AC_PROG_LN_S
AC_PROG_CC
##AM_PROG_CC_C_O
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_RANLIB
AC_PATH_PROG(PERL, perl)


########################################################################
# Checks for libraries


########################################################################
# Checks for headers
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([fcntl.h limits.h malloc.h stdlib.h string.h unistd.h])
# ? AC_CHECK_HEADERS(errno.h strings.h unistd.h)


########################################################################
# Checks for typedefs / structures
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME


########################################################################
# Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_ERROR_AT_LINE
AC_FUNC_FORK
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_FUNC_SELECT_ARGTYPES
AC_TYPE_SIGNAL
AC_FUNC_STAT
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([dup2 memset mkdir select socket strchr strrchr])



########################################################################
# Setup useful global defines in config.h

# Get install path
# Only expect to have a working setup after make install, so is fine
VK_INSTALL_PREFIX=$prefix
if test $VK_INSTALL_PREFIX = NONE ; then
   VK_INSTALL_PREFIX=`pwd`
fi

# valkyrie installation paths
AC_DEFINE_UNQUOTED(VK_INSTALL_PREFIX, "$VK_INSTALL_PREFIX", [valkyrie install prefix])
AC_DEFINE_UNQUOTED(VK_DOC_PATH,       "/doc/",              [valkyrie install doc path])

# valkyrie config paths
AC_DEFINE_UNQUOTED(VK_CFG_DIR,   ".$PACKAGE",               [valkyrie config dir])
AC_DEFINE_UNQUOTED(VK_DBASE_DIR, "dbase/",                  [valkyrie config dbase dir])
AC_DEFINE_UNQUOTED(VK_SUPPS_DIR, "suppressions/",           [valkyrie config supps dir])
AC_DEFINE_UNQUOTED(VK_LOGS_DIR,  "/tmp/valkyrie_logs/",     [valkyrie config logs dir])

# programs
AC_DEFINE_UNQUOTED(BIN_VALGRIND, "$VALGRIND",                          [valgrind executable])
AC_DEFINE_UNQUOTED(BIN_LOGMERGE, "$VK_INSTALL_PREFIX/bin/vk_logmerge", [log-merge executable])
AC_DEFINE_UNQUOTED(BIN_EDITOR,   "$VK_EDITOR",                         [source code editor])

# misc
AC_DEFINE_UNQUOTED(VK_COPYRIGHT, "(c) 2003-2008", [copyright])
AC_DEFINE_UNQUOTED(VK_AUTHOR,    "OpenWorks LLP", [author])
AC_DEFINE_UNQUOTED(VG_COPYRIGHT, "(c) 2000-2008 and GNU GPL'd by Julian Seward et al.", [valgrind copyright])



########################################################################
# All done.
AC_OUTPUT(
   Makefile
   valkyrie/Makefile
   vk_logmerge/Makefile
   doc/Makefile
   doc/images/Makefile
)

#   tests/Makefile
#   tests/vk_regtest
#   valkyrie/tests/Makefile
#   vk_logmerge/tests/Makefile

